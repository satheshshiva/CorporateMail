<?xml version="1.0" encoding="UTF-8"?>
<project
    name="ExchangeServerTest"
    default="help" >

    <!-- <target name="-jarjar" depends="-compile"> -->

    <target name="-jarjar" >

        <echo>
Custom Jar Jar
           
            out.classes.absolute.dir ${out.classes.absolute.dir}
           out.dex.jar.input.ref ${out.dex.jar.input.ref}
           project.all.jars.path ${project.all.jars.path}
           intermediate.dex.file ${intermediate.dex.file}
           out.dex.input.absolute.dir ${out.dex.input.absolute.dir}
           out.absolute.dir ${out.absolute.dir}
           jar.libs.absolute.dir ${jar.libs.absolute.dir}
        </echo>

        <taskdef
            name="jarjar"
            classname="com.tonicsystems.jarjar.JarJarTask"
            classpath="buildtools/jarjar-1.0.jar" />

        <jarjar jarfile="${out.absolute.dir}/repackagedclasses.jar" >

            <!-- <fileset dir="${out.classes.absolute.dir}" /> -->

            <zipgroupfileset
                dir="${jar.libs.absolute.dir}"
                includes="*.jar" />

            <!-- classess.jar file -->

            <rule
                pattern="javax.naming.**"
                result="com.custom.javax.naming.@1" />

            <rule
                pattern="javax.xml.**"
                result="com.custom.javax.xml.@1" />
            <!-- classess.jar file -->

            <rule
                pattern="com.sun.org.apache.xerces.internal.**"
                result="com.custom.com.sun.org.apache.xerces.internal.@1" />

            <rule
                pattern="com.sun.xml.internal.stream.**"
                result="com.custom.com.sun.xml.internal.stream.@1" />
            <!-- commons codec file -->

            <rule
                pattern="org.apache.commons.httpclient.**"
                result="com.custom.org.apache.commons.httpclient.@1" />
            <!-- EWS api -->

            <rule
                pattern="com.wipromail.sathesh.service.data.**"
                result="com.wipromail.sathesh.service.data.@1" />
            <!-- jcifs file -->

            <rule
                pattern="jcifs.**"
                result="com.custom.jcifs.@1" />
        </jarjar>
    </target>

    <!-- JarJar ends -->


    <!-- Sound begins -->

    <target name="fun" >

        <sound>

            <success source="sounds/sound.wav" />

            <fail
                loops="2"
                source="sounds/sound.wav" />
        </sound>

        <property
            name="fun.done"
            value="true" />

        <echo>
Sound target initialized. A sound will be played after the build finishes. :-)
        </echo>
    </target>

    <!-- Hook for the jarjar initialization -->
    <!-- <target name="-pre-compile" depends="-jarjar"/> -->
    <!-- Hook for jarjar ends -->


    <!-- Hook for the sound initialization -->

    <target
        name="-pre-build"
        depends="fun" />
    <!-- Sound ends -->

    <target name="ApkCopyDev" >

        <echo>
Copying apk to dropbox folder
        </echo>
        <!-- <copy file="${out.absolute.dir}/WiproMailFree-debug.apk" tofile="C:/Users/Sathesh/Dropbox/Public/WiproMailAPK/dev/WiproMailFree-debug.apk"/> -->

        <copy
            file="${out.absolute.dir}/WiproMailFree-debug.apk"
            tofile="/Users/sathesh/Dropbox/Public/WiproMailAPK/dev/WiproMail-debug.apk" />
    </target>

    <target name="ApkCopyRel" >

        <echo>
Copying apk to dropbox folder
        </echo>
        <!-- <copy file="${out.absolute.dir}/WiproMailFree-release.apk" tofile="C:/Users/Sathesh/Dropbox/Public/WiproMailAPK/rel/WiproMailFree-release.apk"/> -->

        <copy
            file="${out.absolute.dir}/WiproMailFree-release.apk"
            tofile="/Users/sathesh/Dropbox/Public/WiproMailAPK/rel/WiproMail-release.apk" />
    </target>

    <!--
          Converts this project's .class files into .dex files
    <target name="-dex" depends="-compile, -post-compile, -obfuscate">
            <macrodef name="dex-helper">
        <element name="external-libs" optional="yes" />
        <attribute name="nolocals" default="false" />
        <sequential>
            <echo>asd egf</echo>
            sets the primary input for dex. If a pre-dex task sets it to
                 something else this has no effect
            <property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />

            set the secondary dx input: the project (and library) jar files
                 If a pre-dex task sets it to something else this has no effect
             <if>
                <condition>
                    <isreference refid="out.dex.jar.input.ref" />
                </condition>
                <else>
                    <path id="out.dex.jar.input.ref">
                        <path refid="project.all.jars.path" /> 
                      <path refid="${out.absolute.dir}/repackagedclasses.jar" />
                      
                    </path>
                </else>
            </if> 
            
				<property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" /> 

            <dex executable="${dx}"
                    output="${intermediate.dex.file}"
                    nolocals="@{nolocals}"
                    verbose="${verbose}">
                <path path="${out.dex.input.absolute.dir}"/>
                <path refid="out.dex.jar.input.ref" />
                <external-libs />
            </dex>
        </sequential>
    </macrodef>
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            only convert to dalvik bytecode is *not* a library
            <do-only-if-not-library elseText="Library project: do not convert bytecode..." >
                special case for instrumented builds: need to use no-locals and need
                     to pass in the emma jar.
                <if condition="${build.is.instrumented}">
                    <then>
                        <dex-helper nolocals="true">
                            <external-libs>
                                <fileset file="${out.absolute.dir}/repackagedclasses.jar" />
                                <fileset file="${emma.dir}/emma_device.jar" />
                            </external-libs>
                        </dex-helper>
                    </then>
                    <else>
                        <dex-helper />
                    </else>
                </if>
            </do-only-if-not-library>
        </do-only-if-manifest-hasCode>
    </target>
    -->

</project>