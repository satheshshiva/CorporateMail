package com.wipromail.sathesh.activity;

import static com.wipromail.sathesh.constants.Constants.TAG;

import java.io.File;
import java.util.Date;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextSwitcher;
import android.widget.TextView;
import android.widget.ViewSwitcher;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.wipromail.sathesh.R;
import com.wipromail.sathesh.animation.ApplyAnimation;
import com.wipromail.sathesh.application.MailApplication;
import com.wipromail.sathesh.application.NotificationProcessing;
import com.wipromail.sathesh.application.interfaces.MailListActivityDataPasser;
import com.wipromail.sathesh.constants.Constants;
import com.wipromail.sathesh.customui.CustomTitleBar;
import com.wipromail.sathesh.fragment.MailListViewFragment;
import com.wipromail.sathesh.service.data.ServiceLocalException;
import com.wipromail.sathesh.ui.OptionsUIContent;
import com.wipromail.sathesh.util.Utilities;

public class CopyOfMailListViewActivity extends FragmentActivity implements Constants,ViewSwitcher.ViewFactory,MailListDataPasser, OnRefreshListener<ListView>{

	private Intent intent;
	private boolean customTitleSupported = false;

	private TextSwitcher titlebar_inbox_status_textswitcher;
	private TextView textViewLoginId;
	private MailListViewFragment mailListViewFragment;
	private PullToRefreshListView mPullRefreshListView;
	private ImageButton maillist_refresh_button,maillist_compose_button;
	private ProgressBar maillist_refresh_progressbar;
	
	@Override
	public TextSwitcher getTitlebar_inbox_status_textswitcher() {
		return titlebar_inbox_status_textswitcher;
	}



	public void setTitlebar_inbox_status_textswitcher(
			TextSwitcher titlebar_inbox_status_textswitcher) {
		this.titlebar_inbox_status_textswitcher = titlebar_inbox_status_textswitcher;
	}
	@Override
	public void onDestroy() {
		super.onDestroy();

		//deleting cache mail images
		boolean success=false;
		try {
			File cacheDir = new File(getMailCacheImageDirectory());
			if(cacheDir.exists()){
				success=Utilities.deleteDirectory(cacheDir);
				Log.d(TAG, "Deleting image cache directory " +((success)?"successful":"failed"));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			Log.d(TAG, "Exception while deleting cache" + e.getMessage());
			e.printStackTrace();
		}
	}


	public String getMailCacheImageDirectory() throws ServiceLocalException, Exception{
		return MailApplication.getApplicationCacheDirectory(this)+"/" + CACHE_DIRECTORY_MAILCACHE ;
		//return MailApplication.getApplicationCacheDirectory(activity).toString() ;
	}

	@Override
	public TextView getTextViewLoginId() {
		// TODO Auto-generated method stub
		return textViewLoginId;
	}

	public void setTextViewLoginId(
			TextView textViewLoginId) {
		this.textViewLoginId = textViewLoginId;
	}


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Log.d(TAG, "MailListViewActivity -> oncreate " + new Date());

		customTitleSupported = requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.activity_mail_list_view);

		if(customTitleSupported)
			getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, CustomTitleBar.getInboxTitleBarLayout());

		/*
		//loading fragment
		FragmentManager fm = getSupportFragmentManager();
		if (fm != null) {
			FragmentTransaction ft = fm.beginTransaction();
			ft.replace(R.id.mailListViewFragment, new MailListViewFragment());
			ft.commit();
		}
		 */


		//Initializing the Text Switcher to use in fragment
		titlebar_inbox_status_textswitcher = (TextSwitcher)findViewById(R.id.titlebar_inbox_status_textswitcher);


		maillist_refresh_button=(ImageButton)findViewById(R.id.maillist_refresh_button);
		maillist_compose_button=(ImageButton)findViewById(R.id.maillist_compose_button);

		setMaillist_refresh_progressbar((ProgressBar)findViewById(R.id.maillist_refresh_progressbar));
		titlebar_inbox_status_textswitcher.setFactory(this);

		ApplyAnimation.setTitleInboxStatusTextSwitcher(this, titlebar_inbox_status_textswitcher);

		//Initializing the Login id text view to be used in fragment

		textViewLoginId=(TextView)findViewById(R.id.titlebar_loginDisplayName); 

		//loading the pull to refresh fragment list

		mailListViewFragment = (MailListViewFragment) getSupportFragmentManager().findFragmentById(
				R.id.mailListViewFragment);

		// Get PullToRefreshListView from Fragment
		mPullRefreshListView = mailListViewFragment.getPullToRefreshListView();

		// Set a listener to be invoked when the list should be refreshed.
		mPullRefreshListView.setOnRefreshListener(this);
		mPullRefreshListView.setRefreshingLabel(getText(R.string.pullToRefresh_checking_big));
		mailListViewFragment.setListShown(true);


		Log.d(TAG, "MailListViewActivity -> oncreate ENDS");	

	}

	@Override
	public void onStart() {
		super.onStart();
		//Notificaition
		Log.i(TAG, "MailListViewActivity -> Starting MNS Service");
		MailApplication.startMNSService(this);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);

		menu.add(1, 1, Menu.FIRST, "Compose").setIcon(OptionsUIContent.getComposeIcon());

		menu.add(1, 2, Menu.FIRST, "Settings").setIcon(OptionsUIContent.getSettingsIcon());

		menu.add(1, 3, Menu.FIRST, "About").setIcon(OptionsUIContent.getAboutIcon());

		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item)
	{
		switch(item.getItemId())
		{
		case 1:
			intent = new Intent(this, ComposeActivity.class);
			startActivity(intent);
			return true;

		case 2:
			intent = new Intent(this, PreferencesActivity.class);
			startActivity(intent);
			return true;

		case 3:
			intent = new Intent(this, AboutActivity.class);
			startActivity(intent);
			return true;

		}
		return super.onOptionsItemSelected(item);

	}


	@Override
	public void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		try {
			NotificationProcessing.cancelAllNotifications(this);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Override
	public View makeView() {
		// TODO Auto-generated method stub

		TextView t = new TextView(this);
		t.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
		t.setTextSize(11);
		return t;
	}



	@Override
	public void onRefresh(PullToRefreshBase<ListView> refreshView) {
		// TODO Auto-generated method stub
		mailListViewFragment.refreshList(false);
	}



	@Override
	public PullToRefreshListView getPullRefreshListView() {
		// TODO Auto-generated method stub
		return mPullRefreshListView;
	}


	public void refreshOnClick(View view){
		mailListViewFragment.refreshList(false);
	}


	public void composeOnClick(View view){
		intent = new Intent(this, ComposeActivity.class);
		startActivity(intent);
	}

	public void moreButtonOnClick(View view){
		openOptionsMenu();
	}


	@Override
	public ImageButton getMaillist_refresh_button() {
		return maillist_refresh_button;
	}



	public void setMaillist_refresh_button(ImageButton maillist_refresh_button) {
		this.maillist_refresh_button = maillist_refresh_button;
	}


	@Override
	public ImageButton getMaillist_compose_button() {
		return maillist_compose_button;
	}



	public void setMaillist_compose_button(ImageButton maillist_compose_button) {
		this.maillist_compose_button = maillist_compose_button;
	}



	@Override
	public ProgressBar getMaillist_refresh_progressbar() {
		return maillist_refresh_progressbar;
	}



	public void setMaillist_refresh_progressbar(
			ProgressBar maillist_refresh_progressbar) {
		this.maillist_refresh_progressbar = maillist_refresh_progressbar;
	}

}
