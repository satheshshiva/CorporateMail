package com.wipromail.sathesh.fragment;

import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextSwitcher;
import android.widget.TextView;

import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.SubMenu;
import com.google.analytics.tracking.android.EasyTracker;
import com.handmark.pulltorefresh.extras.listfragment.PullToRefreshListFragment;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.wipromail.sathesh.BuildConfig;
import com.wipromail.sathesh.R;
import com.wipromail.sathesh.activity.AboutActivity;
import com.wipromail.sathesh.activity.ComposeActivity;
import com.wipromail.sathesh.activity.MailListViewActivity;
import com.wipromail.sathesh.activity.PreferencesActivity;
import com.wipromail.sathesh.activity.ViewMailActivity;
import com.wipromail.sathesh.adapter.MailListViewAdapter;
import com.wipromail.sathesh.application.MailApplication;
import com.wipromail.sathesh.application.MailSort;
import datapasser.MailListActivityDataPasser;
import com.wipromail.sathesh.cache.CacheInbox;
import com.wipromail.sathesh.cache.CacheInboxAdapter;
import com.wipromail.sathesh.constants.Constants;
import com.wipromail.sathesh.customexceptions.NoInternetConnectionException;
import com.wipromail.sathesh.customexceptions.NoUserSignedInException;
import com.wipromail.sathesh.customui.Notifications;
import com.wipromail.sathesh.ews.EWSConnection;
import com.wipromail.sathesh.ews.MailFunctions;
import com.wipromail.sathesh.ews.MailFunctionsImpl;
import com.wipromail.sathesh.ews.NetworkCall;
import com.wipromail.sathesh.service.data.ExchangeService;
import com.wipromail.sathesh.service.data.FindItemsResults;
import com.wipromail.sathesh.service.data.HttpErrorException;
import com.wipromail.sathesh.service.data.Item;
import com.wipromail.sathesh.service.data.WellKnownFolderName;
import com.wipromail.sathesh.threads.InboxAutoUpdater;
import com.wipromail.sathesh.ui.AuthFailedAlertDialog;
import com.wipromail.sathesh.ui.OptionsUIContent;

/**
 * @author sathesh
 *	Handles all other email containing in folders other than mailFunctions
 */
public class AnyMailListViewFragment extends PullToRefreshListFragment implements Constants,MailListViewFragment {

	// ListFragment is a very useful class that provides a simple ListView inside of a Fragment.
	// This class is meant to be sub-classed and allows you to quickly build up list interfaces
	// in your app.
	private MailListDataPasser activityDataPasser ;
	private SherlockFragmentActivity activity ;
	private Context context;
	
	private Bundle bundle;

	private MailFunctions mailFunctions = new MailFunctionsImpl();

	private String changedRowsItemIds;
	private MailListViewAdapter adapter;

	private TextSwitcher titlebar_inbox_status_textswitcher;

	private ImageButton maillist_refresh_button,maillist_compose_button;

	private InboxAutoUpdater t;
	private int i=0;
	private Map<String,Map<String, Object>> mailMapListFromcache;

	private List<Map<String, Object>> mailListFromcache;
	boolean cacheLoaded=false;
	private PullToRefreshListView mPullRefreshListView;
	private final String STATUS_UPDATING="STATUS_UPDATING";
	private final String STATUS_UPDATED="STATUS_UPDATED";
	private final String STATUS_UPDATE_LIST="STATUS_UPDATE_LIST";
	private final String STATUS_ERROR="STATUS_ERROR";
	private  Integer TYPE_OF_DATA_POPULATED=0;
	private final Integer TYPE_OF_DATA_POPULATED_CACHE=1;
	private final Integer TYPE_OF_DATA_POPULATED_EWS=2;

	private Date lastSyncDate;
	private String currentStatus="", currentStatusMsg="";
	private ProgressBar maillist_refresh_progressbar;

	private ImageView successIcon, failureIcon;


	private ActionBar myActionBar;

	private ProgressBar maillist_update_progressbar;
	private FindItemsResults<Item> findResults = null;
	private int mailType;
	private String  mailFolderName;
	private String strFolderId;


	static{

	}
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);


	}



	@Override
	public void onResume() {
		super.onResume();
		Log.i(TAG, "AnyMailListViewFragment -> OnResume() called");

		activity = (SherlockFragmentActivity) getActivity();
		context = (SherlockFragmentActivity) getActivity();
		activityDataPasser = (MailListDataPasser)getActivity();



		if(activity != null){


			//THE UI ELEMENTS IN THE FRAGMENTS MUST BE INITIALIZED IN THE ACTIVITY ITSELF
			//titlebar_inbox_status_textswitcher= activityDataPasser.getTitlebar_inbox_status_textswitcher();

			//remove this
			titlebar_inbox_status_textswitcher = (TextSwitcher)activity.findViewById(R.id.titlebar_inbox_status_textswitcher);

			//Display the login person display name retrieved from the Shared Prefernce. This value will be initially saved while loggin in in the LoginPageActivity
			TextView textViewLoginId = new TextView(activity);

			mailType = activityDataPasser.getMailType();
			mailFolderName = activityDataPasser.getMailFolderName();
			strFolderId = activityDataPasser.getStrFolderId();

			myActionBar = activityDataPasser.getMyActionBar();

			setActionBarTitle(mailType);
			textViewLoginId= activityDataPasser.getTextViewLoginId(); 
			/* Not showing display name in other folders other than mailFunctions
			try {
				//textViewLoginId.setText(MailApplication.getTitleBarDisplayName(activity));
				myActionBar.setSubtitle(MailApplication.getTitleBarDisplayName(activity));

			} catch (Exception e) {
				// TODO Auto-generated catch block
				Log.e(TAG, "Error while setting up the Disply name in title bar");
				e.printStackTrace();
			}
			 */
			mPullRefreshListView = activityDataPasser.getPullRefreshListView();
			//	maillist_refresh_button= activityDataPasser.getMaillist_refresh_button();
			maillist_compose_button= activityDataPasser.getMaillist_compose_button();
			maillist_refresh_progressbar = activityDataPasser.getMaillist_refresh_progressbar();
			successIcon = activityDataPasser.getSuccessIcon();
			failureIcon = activityDataPasser.getFailureIcon();
			maillist_update_progressbar = activityDataPasser.getMaillist_update_progressbar();
			/*
			//setting on pull listener
			mPullRefreshListView.setOnPullEventListener(new OnPullEventListener(){
				@Override
				public void onPullEvent(PullToRefreshBase refreshView, State state,
						Mode direction) {
					// TODO Auto-generated method stub
					try {
						if(null!=currentStatus && currentStatus.equals(STATUS_UPDATED)){
							mPullRefreshListView.setLastUpdatedLabel(MailApplication.getCustomizedInboxPullToRefreshDate(lastSyncDate));
						}
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}	
			});
			 */
			refreshList(false);
			Log.d(TAG, "Completed onResume in AnyMailListFragment ");

		}




	}



	private void setActionBarTitle(int mailType2) {
		// TODO Auto-generated method stub
		switch(mailType){
		case MailListViewActivity.MAIL_TYPE_DRAFTS:
			myActionBar.setTitle(activity.getString(R.string.ActionBarTitle_Drafts));
			break;
		case MailListViewActivity.MAIL_TYPE_SENT_ITEMS:
			myActionBar.setTitle(activity.getString(R.string.ActionBarTitle_SentItems));
			break;
		case MailListViewActivity.MAIL_TYPE_DELETED_ITEMS:
			myActionBar.setTitle(activity.getString(R.string.ActionBarTitle_DeletedItems));
			break;
		case MailListViewActivity.MAIL_TYPE_OUTBOX:
			myActionBar.setTitle(activity.getString(R.string.ActionBarTitle_Outbox));
			break;
		case MailListViewActivity.MAIL_TYPE_JUNK_EMAIL:
			myActionBar.setTitle(activity.getString(R.string.ActionBarTitle_JunkEmail));
			break;
		case MailListViewActivity.MAIL_TYPE_CONVERSATION_HISTORY:
			myActionBar.setTitle(activity.getString(R.string.ActionBarTitle_ConversationHistory));
			break;

		case MailListViewActivity.MAIL_TYPE_FOLDER_WITH_ID:
			myActionBar.setTitle(mailFolderName);
			break;
		case MailListViewActivity.MAIL_TYPE_INBOX_SUBFOLDER_WITH_ID:
			myActionBar.setTitle(mailFolderName);
			break;
		default:
			break;
		}

	}



	public void refreshList(boolean showPulltoRefresh){

		if(!(currentStatus.equals(STATUS_UPDATING)) && !(currentStatus.equals(STATUS_UPDATE_LIST))){

			maillist_update_progressbar.setVisibility(View.VISIBLE);
			maillist_update_progressbar.setProgress(20);
			if(showPulltoRefresh){
				showPullToRefresh();
			}
			displayProgressIcon();
			(new GetFolder()).execute();
		}
	}
	@Override
	public void onStop(){
		super.onStop();
		Log.i(TAG, "AnyMailListViewFragment -> OnStop() called");
		//   t.shutdownCurrentThread=true;


	}

	@Override
	public void onStart() {
		super.onStart();
		Log.i(TAG, "AnyMailListViewFragment -> OnStart() called");
		//   t = new InboxAutoUpdater(activity, handlerInbox);
		//	t.start();
	}



	@Override
	public void onListItemClick(ListView l, View v, int position, long id) {
//		activity = getActivity();
//
//		if (activity != null) {   
			/*
            ListAdapter listAdapter = getListAdapter();
            LocationModel locationModel = (LocationModel) listAdapter.getItem(position);

            // Display a simple Toast to demonstrate that the click event is working. Notice that Fragments have a
            // getString() method just like an Activity, so that you can quickly access your localized Strings.
			 * 
			 */
			//Toast.makeText(activity, getString(R.string.toast_item_click) + locationModel.address, Toast.LENGTH_SHORT).show();

			//the pull to refresh list view starts from instead of 0.. fix for that
			position=positionFixForPullToRefresh(position);

			ListAdapter listAdapter = getListAdapter();
			String a = (String)listAdapter.getItem(position);

			String subject="", from="", to="", cc="";
			Date receivedDate=null;
			Item item;
			Map<String, Object> cachedItem;
			ArrayList<Item> items;
			
			if(BuildConfig.DEBUG){
			Log.d(TAG, "Opening Mail Item Position: "+ position);
			Log.d(TAG, "Opening Mail Item :"+ (String)listAdapter.getItem(position));
			}
			
			//Toast.makeText(activity,
			//		"Click ListItem Number " + position + " item: " + a , Toast.LENGTH_LONG)
			//		.show();

			/*
			if(TYPE_OF_DATA_POPULATED == TYPE_OF_DATA_POPULATED_CACHE){
				cachedItem = mailListFromcache.get(position);
				subject=(String) cachedItem.get(MAPKEY_INBOX_CACHE_SUBJECT);
				from=(String) cachedItem.get(MAPKEY_INBOX_CACHE_FROM);
				//to=(String) cachedItem.get(MAPKEY_INBOX_CACHE_);
				//cc=(String) cachedItem.get(MAPKEY_INBOX_CACHE_);
				receivedDate=(Date) cachedItem.get(MAPKEY_INBOX_CACHE_DATETIMERECEIVED);
			}

			else{
			 */
			try{
				items=findResults.getItems();
				item = items.get(position);


				subject= mailFunctions.getSubject(item);
				from=mailFunctions.getFrom(item);
				to=mailFunctions.getTo(item);
				cc=mailFunctions.getCC(item);
				receivedDate=mailFunctions.getDateTimeReceived(item);
			}
			catch(Exception e){
				e.printStackTrace();
			}
			//}
			Log.d(TAG, "Opening Item with " + "subject= " + subject +  " from= " + from + " to= " + to + " cc= " + cc +" received date= " + ((receivedDate!=null) ? receivedDate.toString():""));
			Intent viewMailIntent = new Intent(activity.getBaseContext(), ViewMailActivity.class);

			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_ITEMID, a);
			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_FROM, from);
			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_TO, to);
			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_CC, cc);
			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_DATETIMERECEIVED,receivedDate.toString());
			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_SUBJECT, subject);
			viewMailIntent.putExtra(MailListViewActivity.EXTRA_MESSAGE_MAIL_TYPE, mailType);
			startActivity(viewMailIntent);
			//ApplyAnimation.setViewMailAnim(activity);

//		}
	}


	private int positionFixForPullToRefresh(int position) {
		// TODO Auto-generated method stub
		return position-1;
	}





	private boolean loadCache() throws Exception{
		mailMapListFromcache  = CacheInboxAdapter.getInboxListFromCache(activity.getApplicationContext());
		//	Log.d(TAG, "mailMapListFromcache " + mailMapListFromcache);

		mailListFromcache = (List<Map<String, Object>>)  CacheInbox.MapOfMapToListOfMap(mailMapListFromcache);
		return ((null!=mailListFromcache) && (mailListFromcache.size() > 0)) ? true : false;


	}
	private class GetFolder extends AsyncTask<Void, String, Void>{


		ExchangeService service;

		@Override
		protected Void doInBackground(Void... paramArrayOfParams) {
			// TODO Auto-generated method stub




			if (activity != null) {
				publishProgress(STATUS_UPDATING, "Updating");
				currentStatus=STATUS_UPDATING;

				try {

					/* DISABLED CACHING FOR OTHER FOLDERS THAN INBOX
					if( !(cacheLoaded)){
						if (CacheInboxAdapter.isCacheInboxAvailable(activity.getApplicationContext())){

							cacheLoaded = loadCache();
							//populate the cache on ui thread
							activity.runOnUiThread(new Runnable() {
								public void run() {

									try {
										populateCacheData(mailListFromcache);
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							});
						}
						else
						{
							cacheLoaded = false;
						}
						//Log.i(TAG, "Cache Loaded: " + cacheLoaded);
					}
					 */
					service = EWSConnection.getServiceFromStoredCredentials(activity.getApplicationContext());

					//EWS call
					Log.d(TAG, "AnyMailListViewFragment -> using webmail url "+service.getUrl());

					switch(mailType){
					case MailListViewActivity.MAIL_TYPE_DRAFTS:
						findResults = NetworkCall.getFirstNItemsFromFolder(WellKnownFolderName.Drafts, service, INBOX_INITIAL_NO_OF_MAILS);
						break;
					case MailListViewActivity.MAIL_TYPE_SENT_ITEMS:
						findResults = NetworkCall.getFirstNItemsFromFolder(WellKnownFolderName.SentItems, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					case MailListViewActivity.MAIL_TYPE_DELETED_ITEMS:
						findResults = NetworkCall.getFirstNItemsFromFolder(WellKnownFolderName.DeletedItems, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					case MailListViewActivity.MAIL_TYPE_OUTBOX:
						findResults = NetworkCall.getFirstNItemsFromFolder(WellKnownFolderName.Outbox, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					case MailListViewActivity.MAIL_TYPE_JUNK_EMAIL:
						findResults = NetworkCall.getFirstNItemsFromFolder(WellKnownFolderName.JunkEmail, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					case MailListViewActivity.MAIL_TYPE_CONVERSATION_HISTORY:
						findResults = NetworkCall.getFirstNItemsFromFolder(strFolderId, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					case MailListViewActivity.MAIL_TYPE_INBOX_SUBFOLDER_WITH_ID:
						findResults = NetworkCall.getFirstNItemsFromFolder(strFolderId, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					case MailListViewActivity.MAIL_TYPE_FOLDER_WITH_ID:
						findResults = NetworkCall.getFirstNItemsFromFolder(strFolderId, service, INBOX_INITIAL_NO_OF_MAILS);

						break;
					default:
						break;
					}


					publishProgress(STATUS_UPDATE_LIST, "Almost done");
					currentStatus=STATUS_UPDATE_LIST;
				}

				catch (final NoUserSignedInException e) {

					publishProgress(STATUS_ERROR,  "Trouble getting login details\n\nDetails: " +e.getMessage());

					currentStatus=STATUS_ERROR;
					e.printStackTrace();

				}

				catch (UnknownHostException e) {
					publishProgress(STATUS_ERROR,  "Error Occured\n\nDetails: " +e.getMessage());
					currentStatus=STATUS_ERROR;
					e.printStackTrace();

				}
				catch(NoInternetConnectionException nic){
					publishProgress(STATUS_ERROR,  nic.toString());
					currentStatus=STATUS_ERROR;
					nic.printStackTrace();

				}
				catch(HttpErrorException e){


					if(e.getMessage().toLowerCase().contains("Unauthorized".toLowerCase())){
						//unauthorised
						publishProgress(STATUS_ERROR,  "Authentication failed");
						currentStatus=STATUS_ERROR;
					}
					else
					{
						publishProgress(STATUS_ERROR,  "Error Occured\n\nDetails: " +e.getMessage());
						currentStatus=STATUS_ERROR;
					}
					e.printStackTrace();
				}


				catch (Exception e) {

					publishProgress(STATUS_ERROR, "Error Occured \n\nDetails: " +e.getMessage());
					currentStatus=STATUS_ERROR;
					e.printStackTrace();

				}


			}


			return null;
		}


		@Override
		protected void onProgressUpdate(String... str) {
			if(str[0].equals(STATUS_UPDATING)){
				Log.d(TAG, "AnyMailListViewFragment -> Status Updating -> setting indeterminate progress to true");
				activity.setSupportProgressBarIndeterminateVisibility(true);		//this is not needed here bcos the progress is not set to false in oncreate
				switch(mailType){
				case MailListViewActivity.MAIL_TYPE_DRAFTS:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,getString(R.string.ActionBarTitle_Drafts)).toString());
					break;
				case MailListViewActivity.MAIL_TYPE_SENT_ITEMS:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,getString(R.string.ActionBarTitle_SentItems)).toString());

					break;
				case MailListViewActivity.MAIL_TYPE_DELETED_ITEMS:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,getString(R.string.ActionBarTitle_DeletedItems)).toString());

					break;
				case MailListViewActivity.MAIL_TYPE_OUTBOX:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,getString(R.string.ActionBarTitle_Outbox)).toString());

					break;
				case MailListViewActivity.MAIL_TYPE_JUNK_EMAIL:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,getString(R.string.ActionBarTitle_JunkEmail)).toString());

					break;
				case MailListViewActivity.MAIL_TYPE_CONVERSATION_HISTORY:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,getString(R.string.ActionBarTitle_ConversationHistory)).toString());

					break;
				case MailListViewActivity.MAIL_TYPE_INBOX_SUBFOLDER_WITH_ID:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,mailFolderName).toString());

					break;
				case MailListViewActivity.MAIL_TYPE_FOLDER_WITH_ID:
					titlebar_inbox_status_textswitcher.setText(activity.getString(R.string.folder_updater_progress,mailFolderName).toString());

					break;
				default:
					break;
				}
				//titlebar_inbox_status_textswitcher.setString(activity.getText(R.string.folder_updater_progress,"asd").toString());
				//mPullRefreshListView.setLastUpdatedLabel(activity.getText(R.string.pullToRefresh_checking_small).toString());
				displayProgressIcon();
				maillist_update_progressbar.setVisibility(View.VISIBLE);
				maillist_update_progressbar.setProgress(50);

			}
			else if(str[0].equals(STATUS_UPDATE_LIST)){
				activity.setSupportProgressBarIndeterminateVisibility(true);		
				mPullRefreshListView.setLastUpdatedLabel(activity.getText(R.string.folder_checking_almostDone).toString());
				titlebar_inbox_status_textswitcher.setText(activity.getText(R.string.folder_checking_almostDone).toString());
				displayProgressIcon();
				maillist_update_progressbar.setVisibility(View.VISIBLE);
				maillist_update_progressbar.setProgress(80);

			}
			else  if(str[0].equals(STATUS_UPDATED)){
				activity.setSupportProgressBarIndeterminateVisibility(false);
				titlebar_inbox_status_textswitcher.setText(getUpdatedProgressString(activity,lastSyncDate));
				mPullRefreshListView.setLastUpdatedLabel(getUpdatedProgressString(activity,lastSyncDate));
				hidePullToRefresh();
				displaySuccessIcon();
				maillist_update_progressbar.setVisibility(View.GONE);
				maillist_update_progressbar.setProgress(0);
			}
			else  if(str[0].equals(STATUS_ERROR)){
				activity.setSupportProgressBarIndeterminateVisibility(false);
				hidePullToRefresh();
				displayFailureIcon();
				maillist_update_progressbar.setVisibility(View.GONE);
				maillist_update_progressbar.setProgress(0);
				if(!(str[1].equalsIgnoreCase("Authentication failed"))){
					titlebar_inbox_status_textswitcher.setText(activity.getText(R.string.folder_updater_error));
					mPullRefreshListView.setLastUpdatedLabel(activity.getText(R.string.folder_updater_error));
				}
				else{
					// for auth failed show an alert box
					titlebar_inbox_status_textswitcher.setText("Authentication failed");
					mPullRefreshListView.setLastUpdatedLabel("Authentication Failed");
					if(isAdded()){
						AuthFailedAlertDialog.showAlertdialog(activity, context);
						}
					else{
						Log.e(TAG, "Authentication failed. Not able to add the alert dialog due to isAdded() is false");
					}
					// stop the MNS service
					MailApplication.stopMNSService(context);
				}
			}
		}

		@Override
		protected void onPostExecute(Void a) {

			try {


				if(currentStatus.equalsIgnoreCase(STATUS_UPDATE_LIST)){
					populateWSCallData(findResults);
					publishProgress(STATUS_UPDATED, "Updated");
					currentStatus=STATUS_UPDATED;
				}

			}
			catch(Exception e){
				e.printStackTrace();
			}

		}


	}

	private void showPullToRefresh(){
		mPullRefreshListView.setRefreshing();
	}
	private void hidePullToRefresh(){
		//notify pull to refresh
		mPullRefreshListView.onRefreshComplete();
	}

	private void populateWSCallData(FindItemsResults<Item> findResults) throws Exception {
		// TODO Auto-generated method stub
		ArrayList<Item> itemList;
		String[] itemIds;

		if(null != findResults){

			itemList = findResults.getItems();

			//..itemIds = new String[INBOX_INITIAL_NO_OF_MAILS];			//bug fix on v0.1.2
			if(itemList !=null){
				itemIds = new String[itemList.size()];
				i=0;
				for(Item item : itemList){
					itemIds[i] = mailFunctions.getItemId(item);						 
					i++;
				}
				adapter = new MailListViewAdapter(activity.getApplicationContext(), itemIds, itemList, false ,mailType);
				// Populating UI... Assign adapter to ListView
				setListAdapter(adapter); 
				//cache all the newly written data
				Log.i(TAG, "calling cache data in populateWSCallData()");
				//cacheData(itemList);

				lastSyncDate= new Date();
				/* DISABLED CACHING FOR OTHER FOLDERS THAN INBOX
				// cache last update date

				CacheLastSuccessfulInboxSyncAdapter.storeLastSyncDate(activity, lastSyncDate);

				//cache the mailFunctions
				CacheInboxAdapter.writeCacheInboxData(activity.getApplicationContext(), itemList, false);

				 */
				//setting flag
				TYPE_OF_DATA_POPULATED = TYPE_OF_DATA_POPULATED_EWS;
			}

		}
	}
	private void populateCacheData(List<Map<String, Object>> mailListFromcache) throws Exception {
		// TODO Auto-generated method stub

		i=0;
		String[] itemIdsCache;

		if(null != mailListFromcache && mailListFromcache.size() >0)
		{
			MailSort.sortByDateTimeReceived(mailListFromcache);
			Log.i(TAG, "Populating Cached data\n Cache count: " + mailListFromcache.size() );


			itemIdsCache = new String[mailListFromcache.size()];

			for(Map<String, Object> cacheRow : mailListFromcache){
				//Log.i(TAG, "CacheRow " + cacheRow  );

				itemIdsCache[i] = ((cacheRow!=null) && (cacheRow.get("itemId")!=null))  ? cacheRow.get("itemId").toString() : "";
				i++;
			}

			adapter = new MailListViewAdapter(activity.getApplicationContext(), itemIdsCache, mailListFromcache, true, mailType);
			// Assign adapter to ListView
			setListAdapter(adapter); 
			TYPE_OF_DATA_POPULATED = TYPE_OF_DATA_POPULATED_CACHE;
		}
		else
		{
			Log.e(TAG, "Cache List null or empty");
		}

	}

	private String getUpdatedProgressString(Context context, Date lastSyncDate){
		return context.getString(R.string.folder_updater_success, (new SimpleDateFormat(TITLEBAR_UPDATED_DATEFORMAT)).format(lastSyncDate.getTime()));
	}





	public void displayProgressIcon(){
		maillist_refresh_progressbar.setVisibility(View.VISIBLE);
		successIcon.setVisibility(View.GONE);
		failureIcon.setVisibility(View.GONE);
	}


	public void displaySuccessIcon(){
		maillist_refresh_progressbar.setVisibility(View.GONE);
		successIcon.setVisibility(View.VISIBLE);
		failureIcon.setVisibility(View.GONE);
	}

	public void displayFailureIcon(){
		maillist_refresh_progressbar.setVisibility(View.GONE);
		successIcon.setVisibility(View.GONE);
		failureIcon.setVisibility(View.VISIBLE);
	}



	@Override
	public void backPressed() {
		// TODO Auto-generated method stub
		activity.finish();
	}



	@Override
	public void actionbarHomePressed() {
		// TODO Auto-generated method stub
		activity.finish();
	}

	@Override
	public void createOptionsMenu(Menu menu){

		//Always Visible menu
		menu.add(ACTIONBAR_REFRESH)
		.setIcon(OptionsUIContent.getRefreshIcon())
		.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS|MenuItem.SHOW_AS_ACTION_WITH_TEXT);




		//Submenu
		SubMenu subMenu = menu.addSubMenu("");


		subMenu
		.add(ACTIONBAR_SETTINGS)
		.setIcon(OptionsUIContent.getSettingsIcon())
		.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);


		subMenu
		.add(ACTIONBAR_ABOUT)
		.setIcon(OptionsUIContent.getAboutIcon())
		.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);


		//Overflow submenu icon
		MenuItem subMenuItem = subMenu.getItem();
		subMenuItem.setIcon(OptionsUIContent.getMoreoverFlowIcon());
		subMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT);

	}

	@Override
	public void optionsItemSelected(MenuItem item){
		if(item!=null && item.getItemId()==android.R.id.home){
			actionbarHomePressed();
		}
		else if(item!=null && item.getTitle().equals(ACTIONBAR_REFRESH))
		{
			refreshList(false);
		}
		else if(item!=null && item.getTitle().equals(ACTIONBAR_COMPOSE)){
			Intent intent = new Intent(activity, ComposeActivity.class);
			startActivity(intent);
		}
		else if(item!=null && item.getTitle().equals(ACTIONBAR_SETTINGS)){
			Intent intent = new Intent(activity, PreferencesActivity.class);
			startActivity(intent);
		}
		else if(item!=null && item.getTitle().equals(ACTIONBAR_ABOUT)){
			Intent intent = new Intent(activity, AboutActivity.class);
			startActivity(intent);
		}

	}


}
